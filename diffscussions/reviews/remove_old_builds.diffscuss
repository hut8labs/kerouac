#* 
#* author: Edmund Jorgensen
#* email: tomheon@gmail.com
#* date: 2015-01-15T19:19:02-0500
#* 
#- Remove old builds.
#- 
#- 
diff --git a/buildcmd.go b/buildcmd.go
index 2ca2d93..397eaba 100644
--- a/buildcmd.go
+++ b/buildcmd.go
@@ -41,52 +41,75 @@ func DoBuildCommand() {
 	if *dryRun {
 		log.Printf("Dry run, will print actions but not take them.")
 	}
 
 	createBuildRecord(buildId)
 
 	logFile := configureLogging(buildId)
 	defer logFile.Close()
 
 	logStart(buildId)
 
 	config, err := ParseConfigFile(configFile)
 	if err != nil {
 		logAndDie(fmt.Sprintf("Error parsing config file: %s", err), buildId)
 	}
 
 	buildSuceeded := runBuild(srcDir, config, buildId)
 	createTarball(srcDir, buildId)
 	removeSrcDir(srcDir)
 
-	// TODO clean up old builds unless told not to
-
 	// TODO update the html
 
 	if buildSuceeded {
+		if err = cleanOldBuilds(buildId.RootDir, buildId.Project, config.NumBuildsToKeep); err != nil {
+			log.Printf("Warning, error trying to remove old builds: %s", err)
+		}
+
 		os.Exit(0)
 	} else {
 		os.Exit(1)
 	}
 
 }
 
+func cleanOldBuilds(rootDir string, project string, buildsToKeep int) error {
+	if buildsToKeep < 1 {
+		return fmt.Errorf("Refusing to keep < 1 build, not deleting any: %d", buildsToKeep)
+	}
+
+	buildIdsToRemove, err := FindBuildIdsGreaterThanN(rootDir, project, buildsToKeep)
+	if err != nil {
+		return err
+	}
+
+	for _, buildId := range buildIdsToRemove {
+		buildDir := FmtBuildDir(buildId)
+		log.Printf("Removing old build dir %s", buildDir)
+		if err = os.RemoveAll(buildDir); err != nil {
+			return err
+		}
+	}
+
+	return nil
+}
+
 func logAndDie(msg string, buildId BuildId) {
 	if err := MarkBuildFailed(buildId); err != nil {
 		log.Printf("Could not mark build failed in db: %s", err)
 	}
 	log.Fatalf(msg)
 }
 
 func createBuildRecord(buildId BuildId) {
 	log.Printf("Creating db record for build.")
 
 	if !*dryRun {
 		if err := CreateBuildRecord(buildId); err != nil {
 			log.Fatalf("Could not create build record: %s", err)
 		}
 	}
 }
 
 func removeSrcDir(srcDir string) {
 	if *noRemoveSrcDir {
 		log.Printf("Not removing source dir due to --no-remove-src.")
@@ -109,41 +132,41 @@ func createTarball(srcDir string, buildId BuildId) {
 }
 
 func runBuild(srcDir string, config *Config, buildId BuildId) bool {
 	log.Printf("Running build in dir %s with script %s and args %s", srcDir, config.BuildScript, config.BuildScriptArgs)
 
 	succeeded := false
 
 	if !*dryRun {
 		buildOutput, err := RunBuildScript(srcDir, config.BuildScript, config.BuildScriptArgs, config.TimeoutInSecs, buildId)
 
 		if err != nil {
 			log.Printf("Completed build with error: %s", err)
 			MarkBuildFailed(buildId)
 		} else {
 			log.Printf("Completed build successfully.")
 			MarkBuildSucceeded(buildId)
 			succeeded = true
 		}
 
 		log.Printf("Build script stdout in: %s", buildOutput.StdoutPath)
-		log.Printf("Build scrip stderr in: %s", buildOutput.StderrPath)
+		log.Printf("Build script stderr in: %s", buildOutput.StderrPath)
 	}
 
 	return succeeded
 }
 
 func configureLogging(buildId BuildId) *os.File {
 	logsDir := FmtLogsDir(buildId)
 
 	log.Printf("Creating logs dir %s with perms 0700", logsDir)
 
 	if !*dryRun {
 		// TODO: reconsider permissions
 		os.MkdirAll(logsDir, 0700)
 	}
 
 	logPath := FmtKerouacLogPath(buildId)
 
 	log.Printf("Creating log at %s", logPath)
 
 	var logFile *os.File
diff --git a/records.go b/records.go
index b2d1bc6..5cf34ea 100644
--- a/records.go
+++ b/records.go
@@ -1,24 +1,25 @@
 package main
 
 import (
 	"code.google.com/p/go-sqlite/go1/sqlite3"
+	"fmt"
 	"io"
 	"os"
 	"path/filepath"
 	"time"
 )
 
 func CreateBuildRecord(buildId BuildId) error {
 	conn, err := getConn(buildId.RootDir)
 	if err != nil {
 		return err
 	}
 	defer conn.Close()
 
 	if err = createTablesAndIndexes(conn); err != nil {
 		return err
 	}
 
 	if err = insertBuildRecord(conn, buildId); err != nil {
 		return err
 	}
@@ -86,40 +87,57 @@ func FindMatchingBuildIds(rootDir string, project string, tag string, datetime s
 			break
 		} else if err != nil {
 			return nil, err
 		}
 	}
 
 	return buildIds, nil
 }
 
 func FindLatestBuildId(rootDir string, project string, tag string, datetime string) (*BuildId, error) {
 	buildIds, err := FindMatchingBuildIds(rootDir, project, tag, datetime)
 	if err != nil {
 		return nil, err
 	}
 	if len(buildIds) == 0 {
 		return nil, nil
 	}
 	return &buildIds[0], nil
 }
 
+func FindBuildIdsGreaterThanN(rootDir string, project string, n int) ([]BuildId, error) {
+	if n < 0 {
+		return nil, fmt.Errorf("Cannot find builds greater than %d", n)
+	}
+
+	buildIds, err := FindMatchingBuildIds(rootDir, project, "", "")
+	if err != nil {
+		return buildIds, err
+	}
+
+	if n > len(buildIds) {
+		n = len(buildIds)
+	}
+
+	return buildIds[n:], nil
+}
+
 func scanBuildId(rootDir string, stmt *sqlite3.Stmt) (BuildId, error) {
 	var rowProject, rowTag, rowDatetime string
 	err := stmt.Scan(&rowProject, &rowTag, &rowDatetime)
 	if err != nil {
 		return BuildId{}, err
 	}
 
 	dateTime, err := time.Parse(DateFormat, rowDatetime)
 	if err != nil {
 		return BuildId{}, err
 	}
 	return BuildIdAt(rootDir, rowProject, rowTag, dateTime), nil
 }
 
 func updateBuildStatus(buildId BuildId, status string) error {
 	conn, err := getConn(buildId.RootDir)
 	if err != nil {
 		return err
 	}
 	defer conn.Close()
