#!/usr/bin/env bash

##############################################################################
# Variables requiring your customization (will also pick up variables set in #
# the environment)                                                           #
##############################################################################

KEROUAC_WORK_DIR=${KEROUAC_WORK_DIR:-""}
KEROUAC_ROOT=${KEROUAC_ROOT:-""}
KEROUAC=${KEROUAC:-""}

################################################################################
# Variables you may wish / need to customize (will prefer variables set in the #
# environment)                                                                 #
################################################################################

CI_SCRIPT=${CI_SCRIPT:-"ci_build.sh"}

BATCH=${BATCH:-"/usr/bin/env batch"}

GIT=${GIT:-"/usr/bin/env git"}

GIT_LOG_CMD=${GIT_LOG_CMD:-"log --name-status"}

#############################
# Verify required variables #
#############################

if [ -z "$KEROUAC_WORK_DIR" ]
then
    echo "Please edit hook / env to set KEROUAC_WORK_DIR"
    exit 1
fi

if [ -z "$KEROUAC_ROOT" ]
then
    echo "Please edit hook / env to set KEROUAC_ROOT"
    exit 1
fi

if [ -z "$KEROUAC" ]
then
    echo "Please edit hook / env to set KEROUAC"
    exit 1
fi

################################
# Begin actual hook processing #
################################

# This assume a normal git hook execution from the root of the git dir.
PROJECT=$(basename $(pwd))

mkdir -p $KEROUAC_WORK_DIR

HOLD_GIT_DIR="$GIT_DIR"
BASE_DIR=$(pwd)

while read LINE
do
    # Just in case of error earlier
    cd "$BASE_DIR"
    export GIT_DIR="$HOLD_GIT_DIR"

    SEGS=( $LINE )
    FROM=${SEGS[0]}
    TO=${SEGS[1]}
    REF=${SEGS[2]}
    BRANCH=$(basename $REF)
    TAG=${BRANCH}@${TO}

    TMP_BUILD_DIR="$KEROUAC_WORK_DIR/${PROJECT}-${BRANCH}-${TO}"

    $GIT clone $(pwd) $TMP_BUILD_DIR
    cd $TMP_BUILD_DIR
    unset GIT_DIR
    $GIT checkout $BRANCH
    $GIT reset --hard $TO

    LOG_FILE=$(mktemp)

    $GIT $GIT_LOG_CMD $FROM..$TO > $LOG_FILE

    CI_COMMAND="$TMP_BUILD_DIR/$CI_SCRIPT"

    if [ ! -x "$CI_COMMAND" ]
    then
        echo "ERROR: $CI_COMMAND does not exist or is not executable."
        exit 1
    fi

    RUN_CI_COMMAND="$CI_COMMAND $KEROUAC $KEROUAC_ROOT $PROJECT $TAG $LOG_FILE"

    echo "$RUN_CI_COMMAND" | $BATCH
done
